@page "/AddEmployee"
@page "/ManageEmployee/{Id}"
@using Newtonsoft.Json
@using Utility

<PageTitle>Manage Employee</PageTitle>

<MudCard Style="width: 60%" Class="text-center mx-auto">
    <MudContainer>
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h6">Details</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent>
            <EditForm Model="@employee" OnValidSubmit="SaveEmployee">
                <DataAnnotationsValidator />
                <MudTextField Required="true" Label="First Name" @bind-Value="employee.FirstName" For="@(() => employee.FirstName)"></MudTextField>
                <MudTextField Required="true" Label="Last Name" @bind-Value="employee.LastName" For="@(() => employee.LastName)"></MudTextField>
                <MudTextField Required="true" Label="Department" @bind-Value="employee.Department" For="@(() => employee.Department)"></MudTextField>
                <MudTextField Required="true" InputType="InputType.Email" Label="Email" @bind-Value="employee.Email" For="@(() => employee.Email)"></MudTextField>
                <MudDatePicker Required="true" MaxDate="DateTime.Now" Label="DOB" @bind-Date="employee.DateOfBrith" PickerVariant="PickerVariant.Dialog" For="@(() => employee.DateOfBrith)"></MudDatePicker>
                <MudCardActions Class="justify-content-end">
                    <MudItem Class="d-flex py-5">
                        <MudButton OnClick="Cancel" Color="Color.Primary">Cancel</MudButton>
                        <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary">Submit</MudButton>
                    </MudItem>
                </MudCardActions>
            </EditForm>
        </MudCardContent>
    </MudContainer>
</MudCard>

@code {
    [Parameter]
    public string? Id { get; set; }
    [Inject]
    public HttpClient httpClient { get; set; }
    public Employee employee { get; set; } = new();
    protected override async Task OnInitializedAsync()
    {
        if (Id != null)
        {
            employee = await GetEmployee();
        }
    }
    public async Task<Employee> GetEmployee()
    {
        var response = await httpClient.GetAsync($"/Emp/GetEmployee?id={Convert.ToInt32(Id)}");
        var contentTemp = await response.Content.ReadAsStringAsync();
        return JsonConvert.DeserializeObject<Employee>(contentTemp)!;
    }
    private void Cancel()
    {
        NavManager.NavigateTo("/");
    }
    private async Task SaveEmployee(EditContext context)
    {
        if (context.Validate())
        {
            if (employee.EmployeeId > 0)
            {
                var status = await httpClient.PutAsJsonAsync("/Emp/UpdateEmployee", employee);
                if (status.IsSuccessStatusCode)
                {
                    snackbar.Add("Employee updated successfully!", Severity.Success);
                    NavManager.NavigateTo("/");
                }
                else
                {
                    snackbar.Add("Something went wrong!", Severity.Error);
                }
            }
            else
            {
                var status = await httpClient.PostAsJsonAsync("/Emp/AddEmployee", employee);
                if (status.IsSuccessStatusCode)
                {
                    snackbar.Add("Employee added successfully!", Severity.Success);
                    NavManager.NavigateTo("/");
                }
                else
                {
                    snackbar.Add("Something went wrong!", Severity.Error);
                }
            }
        }
    }
}